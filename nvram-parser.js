// Generated by IcedCoffeeScript 1.6.3-g

/*
format begins with 54 43 46 31 0C
  TCF1 and OC
  then 3 nulls

then key value pairs separated by nulls

format ends with two nulls
  first null normal line end
  second null signifies EOF
*/

(function() {
  var NvramParser, buffertools, fs, iced, zlib, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  zlib = require('zlib');

  buffertools = require('buffertools');

  NvramParser = (function() {
    function NvramParser() {}

    NvramParser.pretty = false;

    NvramParser.error = function(e) {
      return console.error("error: " + e);
    };

    NvramParser.header = "54 43 46 31 0C 00 00 00".toLowerCase().replace(/\s/g, "");

    NvramParser.footer = "00 00".replace(" ", "");

    NvramParser.separator = "\u0000";

    NvramParser.validate = function(hexstring) {
      var f, h;
      if ((h = hexstring.slice(0, +(this.header.length - 1) + 1 || 9e9)) !== this.header) {
        return "header \"" + h + "\" does not match expected NVRAM cfg format -- aborting";
      } else if ((f = hexstring.slice(-this.footer.length)) !== this.footer) {
        return "footer \"" + f + "\" does not match expected NVRAM cfg format -- aborting";
      }
      return true;
    };

    NvramParser.loadFile = function(filename, autocb) {
      var buf, err, fz, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fz = fs.readFileSync(filename);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/nvram-parser.iced",
          funcname: "NvramParser.loadFile"
        });
        zlib.gunzip(fz, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return buf = arguments[1];
            };
          })(),
          lineno: 41
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          autocb(err);
          return;
        }
        autocb(buf);
        return;
      });
    };

    NvramParser.parse = function(hexbuffer) {
      var body, bound, eq, key, pair, settings, val;
      body = hexbuffer.slice(this.header.length, +(-this.footer.length - 2) + 1 || 9e9);
      bound = 0;
      settings = {};
      while (bound < body.length) {
        bound = buffertools.indexOf(body, NvramParser.separator, 0);
        if (bound < 0) {
          break;
        }
        pair = body.slice(0, +(bound - 1) + 1 || 9e9);
        body = body.slice(bound + 1);
        pair = pair.toString("utf8");
        eq = pair.indexOf("=");
        key = pair.slice(0, +(eq - 1) + 1 || 9e9);
        val = pair.slice(eq + 1);
        settings[key] = val;
      }
      return settings;
    };

    NvramParser.decode = function(filename, autocb) {
      var buf, hex_f, settings, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/nvram-parser.iced",
          funcname: "NvramParser.decode"
        });
        NvramParser.loadFile(filename, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return buf = arguments[0];
            };
          })(),
          lineno: 71
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!(buf instanceof Buffer)) {
          autocb(NvramParser.error(buf));
          return;
        }
        hex_f = buffertools.toHex(buf);
        valid = NvramParser.validate(hex_f);
        if (valid !== true) {
          autocb(NvramParser.error(valid));
          return;
        }
        settings = NvramParser.parse(buf);
        if (NvramParser.pretty) {
          autocb(JSON.stringify(settings, null, 2));
          return;
        } else {
          autocb(JSON.stringify(settings));
          return;
        }
      });
    };

    NvramParser.encode = function(filename, autocb) {
      var buf, err, fz, json, key, last, pair, pairs, settings, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      json = fs.readFileSync(filename);
      settings = JSON.parse(json);
      pairs = (function() {
        var _results;
        _results = [];
        for (key in settings) {
          value = settings[key];
          pair = new Buffer("" + key + "=" + value);
          _results.push(buffertools.concat(pair, this.separator));
        }
        return _results;
      })();
      last = pairs[pairs.length - 1];
      pairs[pairs.length - 1] = last.slice(0, -1);
      buf = buffertools.concat.apply(buffertools, [buffertools.fromHex(new Buffer(this.header))].concat(__slice.call(pairs), [buffertools.fromHex(new Buffer(this.footer))]));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/nvram-parser.iced",
          funcname: "NvramParser.encode"
        });
        zlib.gzip(buf, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return fz = arguments[1];
            };
          })(),
          lineno: 97
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          autocb(error(err));
          return;
        }
        autocb(fz);
        return;
      });
    };

    return NvramParser;

  }).call(this);

  module.exports = NvramParser;

}).call(this);
